[Event]
-Name:Office_script
-Prq.IsGlobalEvent:0
-Protected:-1
-Priority:-1
-Think.Speed:1
-Script.In:
	local i=0;
	local rndValue;
	local nextTrashTime = getTime()+60;
	local fNewTrashProbability = 0.1;//10% шанс по€влени€ мусора в минуту
	local fNewCollectibleProbability = 0.1;//10% шанс по€влени€ мусора в минуту
	
	local nextTimeDelta = 0.1;
	local nextTalkTime = getTime()+nextTimeDelta;
	local fNewTalkProbability = 0.5;//50% шанс зав€зать разговор
	local talkPlaces=[];
	for(i=1;i<=40;i++){
		talkPlaces.append(format("OfficeTalks::DOT%i",i));
	}
	local sTalkPoint;
	local nextTalkPlace=0;
	randomizeArray(talkPlaces);
	
	local nextCheckTime = getTime()+30;
	local nextParamsRecalTime = getTime();
	local alarmsFile = core_GetDataPath("\\text\\alarm_names.lng");
	if(g_AutoSaveTime == 0){
		g_AutoSaveTime = getTime() + 60*10;
	}
	// ѕредопределенные действи€

	if (actor_GetAttributeN("Office","Alarm1")==0){
		gui_ShowAlarm(core_Translate("ALARM.2",alarmsFile),300);
		gui_ShowAlarm(core_Translate("ALARM.1",alarmsFile),300);
		actor_SetAttribute("Office","Alarm1",1);
	}

	if (actor_GetAttributeN("Office","Alarm5")==0){
		gui_ShowAlarm(core_Translate("ALARM.5",alarmsFile),300);
		actor_SetAttribute("Office","Alarm5",1);
	}
	
	if (actor_GetAttributeN("Office","Alarm2")==0){
		gui_ShowAlarm(core_Translate("ALARM.4",alarmsFile),300);
		gui_ShowAlarm(core_Translate("ALARM.3",alarmsFile),300);
		actor_SetAttribute("Office","Alarm2",1);
	}
	//============================================================
	while(true){
		if(thisActor.LevelFinish==true){
			actor_SwitchToAction(thisActor,"OFFICE.ENDOFDAY");
			return;
		}
		local nowTime=getTime();
		//============================================================
		if(nowTime > g_AutoSaveTime){
			g_AutoSaveTime = getTime() + 60*10;
			game_SaveGame();
		}
		//============================================================
		if(nowTime > nextTalkTime){
			nextTalkTime = getTime()+nextTimeDelta;
			for(i=0;i<5;i++){//5 площадок разговора за цикл
				rndValue=core_Rnd();
				if(rndValue<fNewTalkProbability){// “ак вер€тность провер€ть дешевле выходит
					sTalkPoint = talkPlaces[nextTalkPlace];
					if(nloc_GetWalkableState(sTalkPoint)==1){//1 - нормальна€ проходима€ точка
						local objectsArray=actor_GetActors( {_byType=1, _byAction="NONE*", _byLocation=sTalkPoint, _randomize=true});
						if(objectsArray.len()>1){
							//core_Warning("Talk-Checking "+sTalkPoint);
							actor_InitTalking(objectsArray[0],objectsArray[1],sTalkPoint);
						}
					}
					nextTalkPlace++;
					if(nextTalkPlace>=talkPlaces.len())
					{
						nextTalkPlace=0;
						randomizeArray(talkPlaces);
					}
				}
			}
		}
		//============================================================
		if(nowTime > nextParamsRecalTime){
			nextParamsRecalTime = getTime()+5*60;
			RecalcOfficeParameters();
		}
		//============================================================
		if(nowTime > nextTrashTime){
			nextTrashTime = getTime()+60;
			
			local objectsArray=actor_GetActors( {_byType=1});
			// определ€ем создавать или не надо
			rndValue=core_Rnd();
			local isTrash=false;
			if(rndValue<=fNewTrashProbability){
				isTrash=true;
			}
			rndValue=core_Rnd();
			local isCollectible=false;
			if(rndValue<=fNewCollectibleProbability){
				isCollectible=true;
			}
			// ≈сли надо - создаем!!
			if(isTrash || isCollectible){
				// провер€ем сколько их на уровне
				local lTrashes = actor_GetProfessionStats("COLLECTIBLE.RANDOM").ActorsCount;
				//core_Warning(format("уже мусоров %i",lTrashes));
				if(lTrashes < getGlobal("max_collectibles_perlevel"))
				{
					// создаем мусор или коллектибл
					local sTemplateName = "collectible.trash";
					local sTemplateOptions="";
					if(isCollectible){
						// создаем коллектибл
						sTemplateName = "collectible";
						sTemplateOptions=format("collectible_number=%i",core_Rnd(0,7+1).tointeger());
					}
					local sTrashLocation = format("FurniTRASH::TRASH%i", core_Rnd(1,20+1).tointeger(),sTemplateOptions);
					if(nloc_GetWalkableState(sTrashLocation)==1)
					{// ≈сли выбранна€ проходима
						local isBusy=actor_GetActors({_byLocation=sTrashLocation});
						if(isBusy.len()==0)
						{
							local newTrash=actor_CreateActor(sTemplateName,sTemplateName.toupper(),{_options=sTemplateOptions,_location=sTrashLocation});//actor_SetActorPos(newTrash,sTrashLocation);
							actor_RandomizePos(newTrash,sTrashLocation);
							actor_SetActorEnabled(newTrash, true);
							if(isCollectible){
								actor_SetAttribute(newTrash,"IsCollectible",1);
							}
						}//else{core_Alert(sTrashLocation+" busy!");}
					}
				}
			}
		}
		//============================================================
		if(nowTime > nextCheckTime){
			local nextCheckTime = getTime()+1800;
			//этот цикл высчитывает "каечство редакции" на текущий момент по стобальной шкале и зафигаривает его в массив, чтобы по поокнчанию сдачи высчитать среднее.
			// ачесво определ€етс€ по четырЄм критери€м:
			//1)количестов мусора, котоырй не убран и который никто не убирает (20 баллов). 0-1 - 20 баллов. далее за каждый мусор снимаетс€ по баллу вплоть до нул€
			local freeTrash=0;
			local trashCount = actor_GetProfessionStats("COLLECTIBLE.RANDOM").ActorsCount;
			freeTrash=trashCount + freeTrash;
			local musorshkiActive=event_GetEvent("JANITOR_WORK");
			freeTrash=freeTrash - musorshkiActive.ActionUsageCount;
			if (freeTrash<0){
				freeTrash=0;
			};
			local rezult1 = 20 - freeTrash;
			if (rezult1<0){
				rezult1=0;
			};
			
            //2)настроение авторов/редакторов (30)
            //100% - 30 баллов
            //далее пропорционально
            //берЄтс€ среднее арифметическое 
               
            //пока настроени€ у нас нет, всЄ закоменчено и стоиз заглушка:
            local rezult2 = 30;
            //local pers = actor_GetActors( {_byProfession="*AUTHOR*"});
            //local = rezult2;
            //for(i=0;i<pers.len();i++){
            //rezult2 = actor_GetAttributeN(pers[i], "mood") + rezult2;
            //}               
            //rezult2 = (rezult2 / pers.len()) * 0,3;

			//3)опыт автров/редакторов (30)
			//100% - 30 баллов
			//далее пропорционально
			//берЄтс€ среднее арифметическое 
            
			//пока опыта у нас нет, тоже стоит заглушка:
            local rezult3 = 30;
            //local = rezult3;
            //for(i=0;i<pers.len();i++){
            //rezult3 = actor_GetAttributeN(pers[i], "exp") + rezult3;
            //}               
            //rezult3 = (rezult3 / pers.len()) * 0,3;
			
			//4)достаточно ли в офисе финансистов (20)
			//100% - 20 баллов
			//далее пропорционально
			local seichaslen  = actor_GetActors( {_byProfession="*FINANS*"})
			local seichas = seichaslen.len();
			if (seichas > actor_GetAttributeN(thisActor, "FinansierMax")){
				seichas = actor_GetAttributeN(thisActor, "FinansierMax");
			}
			local rezult4 = 20 * seichas / actor_GetAttributeN(thisActor, "FinansierMax");
			
			actor_SetAttribute(thisActor, "MagazineQualitySum", actor_GetAttributeN(thisActor, "MagazineQualitySum") + rezult1 + rezult2 + rezult3 + rezult4);
			actor_SetAttribute(thisActor, "MagazineQualityNum", actor_GetAttributeN(thisActor, "MagazineQualityNum") + 1);
		}
		::suspend();
	}
